<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>创建VS Code插件一</title>
    <url>/2025/07/02/%E5%88%9B%E5%BB%BAVS-Code%E6%8F%92%E4%BB%B6%E4%B8%80/</url>
    <content><![CDATA[本人打算创建一个VS Code插件用于调试代码，拟结合AI用于生成测试用例，分析代码等
环境准备安装Node.isVS Code 插件开发使用 JavaScript &#x2F; TypeScript 编写，需要 Node.js 来运行开发脚本和构建流程
官网：https://nodejs.org
安装后验证是否成功
node -v


安装脚手架这里会用到yo和generator-code
yo 是 Yeoman 的命令行工具，是一个用于快速生成项目脚手架的工具，类似于项目生成器
generator-code 是一个 Yeoman 生成器插件，专门用于生成 VS Code 插件项目 的脚手架。
全局安装yo和generator-code
npm i -g yo generator-code

我这里已经安装过了，输出如下

创建VS Code插件项目新建工程在你需要创建插件的目录下输入
yo code

执行如下


[!NOTE]
这里将会依次问你如下几个问题

选择你的插件类型
插件的名字
插件的唯一标识
插件的描述
是否需要git仓库
打包工具选择
选择包管理工具


我的配置如图

选择完成之后出现如下内容

然后可以选择打开新建的工程或者直接跳过，这里选择第一个，打开之后项目结构如图所示，其中最重要的文件是package.json和extension.js，到这里一个VS Code的框架算是基本完成了。

目录介绍
[!NOTE]
.vscode: 里面的文件是用来测试插件或者测试代码的一些文件。node_modules: 第三方依赖。src/test：测试文件。src/extension.ts：插件的主文件

package.json文件该文件是vscode扩展的清单文件，具体可以看文档：发布内容配置
&#123;  &quot;name&quot;: &quot;code-auto-test&quot;,	// 插件名  &quot;displayName&quot;: &quot;code-auto-test&quot;,	// 应用市场显示的名字  &quot;description&quot;: &quot;自动执行代码测试&quot;,	// 插件描述  &quot;version&quot;: &quot;0.0.1&quot;,  &quot;engines&quot;: &#123;    &quot;vscode&quot;: &quot;^1.101.0&quot;  &#125;,  &quot;categories&quot;: [    &quot;Other&quot;	// 扩展类别  ],   // 激活事件组，在那些事件情况下被激活  &quot;activationEvents&quot;: [],   // 插件的主入口文件  &quot;main&quot;: &quot;./out/extension.js&quot;,  &quot;contributes&quot;: &#123;     // 命令    &quot;commands&quot;: [      &#123;        &quot;command&quot;: &quot;code-auto-test.helloWorld&quot;,        &quot;title&quot;: &quot;Hello World&quot;      &#125;    ]  &#125;,  &quot;scripts&quot;: &#123;    &quot;vscode:prepublish&quot;: &quot;npm run compile&quot;,    &quot;compile&quot;: &quot;tsc -p ./&quot;,    &quot;watch&quot;: &quot;tsc -watch -p ./&quot;,    &quot;pretest&quot;: &quot;npm run compile &amp;&amp; npm run lint&quot;,    &quot;lint&quot;: &quot;eslint src&quot;,    &quot;test&quot;: &quot;vscode-test&quot;  &#125;,  &quot;devDependencies&quot;: &#123;    &quot;@types/vscode&quot;: &quot;^1.101.0&quot;,    &quot;@types/mocha&quot;: &quot;^10.0.10&quot;,    &quot;@types/node&quot;: &quot;20.x&quot;,    &quot;@typescript-eslint/eslint-plugin&quot;: &quot;^8.31.1&quot;,    &quot;@typescript-eslint/parser&quot;: &quot;^8.31.1&quot;,    &quot;eslint&quot;: &quot;^9.25.1&quot;,    &quot;typescript&quot;: &quot;^5.8.3&quot;,    &quot;@vscode/test-cli&quot;: &quot;^0.0.10&quot;,    &quot;@vscode/test-electron&quot;: &quot;^2.5.2&quot;  &#125;&#125;

extension.js文件入口文件，即package.json中main字段对应的文件，文件中有导出两个方法：activate和deactivate
测试在package.json文件中添加激活事件
&quot;activationEvents&quot;: [&quot;onCommand:code-auto-test.helloWorld&quot;],

终端进入项目
cd code-auto-testnpm installnpm run compile

这会将 src/extension.ts 编译到 out/extension.js，为插件运行做好准备
F5运行插件，会启动扩展宿主环境，打开任意文件夹，按下ctrl+shift+p 并输入helloworld

确认选择Hello World，右下角出现如图内容表明运行成功

先到这吧，累了😮‍💨
]]></content>
      <categories>
        <category>VS Code插件</category>
      </categories>
      <tags>
        <tag>插件</tag>
        <tag>VS Code</tag>
      </tags>
  </entry>
</search>
